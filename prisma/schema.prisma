datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  password      String?
  name          String?
  email         String          @unique
  emailVerified DateTime?
  role          Role            @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  favoriteIds   String[]
  Product       Product[]
  Conversations Conversation[] @relation(name: "conversationUsers")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  imageSrc    String
  category    String
  userId      String
  price       Int
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id       String    @id @default(cuid())
  Users    User[]    @relation(name: "conversationUsers")
  Messages Message[] @relation(name: "conversationMessages")
}

model Message {
  id         String   @id @default(cuid())
  text       String?
  image      String?
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  conversationId String
  Conversation   Conversation @relation(name: "conversationMessages", fields: [conversationId], references: [id])
}
